// Generated by gencpp from file onrobot_vg_control/OnRobotVGInput.msg
// DO NOT EDIT!


#ifndef ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGINPUT_H
#define ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGINPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace onrobot_vg_control
{
template <class ContainerAllocator>
struct OnRobotVGInput_
{
  typedef OnRobotVGInput_<ContainerAllocator> Type;

  OnRobotVGInput_()
    : gVCA(0)
    , gVCB(0)  {
    }
  OnRobotVGInput_(const ContainerAllocator& _alloc)
    : gVCA(0)
    , gVCB(0)  {
  (void)_alloc;
    }



   typedef uint16_t _gVCA_type;
  _gVCA_type gVCA;

   typedef uint16_t _gVCB_type;
  _gVCB_type gVCB;





  typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> const> ConstPtr;

}; // struct OnRobotVGInput_

typedef ::onrobot_vg_control::OnRobotVGInput_<std::allocator<void> > OnRobotVGInput;

typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGInput > OnRobotVGInputPtr;
typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGInput const> OnRobotVGInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator1> & lhs, const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator2> & rhs)
{
  return lhs.gVCA == rhs.gVCA &&
    lhs.gVCB == rhs.gVCB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator1> & lhs, const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onrobot_vg_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b28006a7c1a9b8e6a658a70e5ab4a0d";
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b28006a7c1a9b8eULL;
  static const uint64_t static_value2 = 0x6a658a70e5ab4a0dULL;
};

template<class ContainerAllocator>
struct DataType< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onrobot_vg_control/OnRobotVGInput";
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# gVCA : Current vacuum value on Channel A.\n"
"#        The vacuum is provided in 1/1000 of relative vacuum.\n"
"#        Please note that this differs from the setpoint given in percent,\n"
"#        as extra accuracy is desirable on the actual vacuum.\n"
"\n"
"uint16 gVCA\n"
"\n"
"# gVCB : Same as the one of channel A.\n"
"\n"
"uint16 gVCB\n"
;
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gVCA);
      stream.next(m.gVCB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnRobotVGInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onrobot_vg_control::OnRobotVGInput_<ContainerAllocator>& v)
  {
    s << indent << "gVCA: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gVCA);
    s << indent << "gVCB: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gVCB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGINPUT_H
