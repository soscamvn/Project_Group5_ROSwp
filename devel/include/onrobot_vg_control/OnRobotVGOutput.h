// Generated by gencpp from file onrobot_vg_control/OnRobotVGOutput.msg
// DO NOT EDIT!


#ifndef ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGOUTPUT_H
#define ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGOUTPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace onrobot_vg_control
{
template <class ContainerAllocator>
struct OnRobotVGOutput_
{
  typedef OnRobotVGOutput_<ContainerAllocator> Type;

  OnRobotVGOutput_()
    : rMCA(0)
    , rVCA(0)
    , rMCB(0)
    , rVCB(0)  {
    }
  OnRobotVGOutput_(const ContainerAllocator& _alloc)
    : rMCA(0)
    , rVCA(0)
    , rMCB(0)
    , rVCB(0)  {
  (void)_alloc;
    }



   typedef uint16_t _rMCA_type;
  _rMCA_type rMCA;

   typedef uint16_t _rVCA_type;
  _rVCA_type rVCA;

   typedef uint16_t _rMCB_type;
  _rMCB_type rMCB;

   typedef uint16_t _rVCB_type;
  _rVCB_type rVCB;





  typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> const> ConstPtr;

}; // struct OnRobotVGOutput_

typedef ::onrobot_vg_control::OnRobotVGOutput_<std::allocator<void> > OnRobotVGOutput;

typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGOutput > OnRobotVGOutputPtr;
typedef boost::shared_ptr< ::onrobot_vg_control::OnRobotVGOutput const> OnRobotVGOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator1> & lhs, const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator2> & rhs)
{
  return lhs.rMCA == rhs.rMCA &&
    lhs.rVCA == rhs.rVCA &&
    lhs.rMCB == rhs.rMCB &&
    lhs.rVCB == rhs.rVCB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator1> & lhs, const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onrobot_vg_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d69df47809c592e1c34e330d53678dd";
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d69df47809c592eULL;
  static const uint64_t static_value2 = 0x1c34e330d53678ddULL;
};

template<class ContainerAllocator>
struct DataType< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onrobot_vg_control/OnRobotVGOutput";
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# rMCA : The Control mode\n"
"# rVCA : The Target vacuume field\n"
"#\n"
"#        The register allows for control of channel A.\n"
"#        The register is split into two 8-bit fields:\n"
"#        Bits 15-8        Bits 7-0\n"
"#        Control mode     Target vacuum\n"
"#\n"
"#        The Control mode field must contain one of these three values:\n"
"#\n"
"#        Value    Name    Description\n"
"#        0 (0x00) Release Commands the channel to release\n"
"#                         any work item and stop the pump,\n"
"#                         if not required by the other channel.\n"
"#        1 (0x01) Grip    Commands the channel to build up\n"
"#                         and maintain vacuum on this channel.\n"
"#        2 (0x02) Idle    Commands the channel to neither release nor grip.\n"
"#                         Workpieces may \"stick\" to the channel\n"
"#                         if physically pressed towards its vacuum cups,\n"
"#                         but the VG will use slightly less power.\n"
"#\n"
"#        The Target vacuum field sets the level of vacuum\n"
"#        to be build up and maintained by the chann el.\n"
"#        It is used only when the control mode is 1 (0x01) / Grip.\n"
"#        The target vacuum should be provided in % vacuum.\n"
"#        It should never exceed 80.\n"
"#\n"
"#        Examples:\n"
"#        Setting the register value 0 (0x0000)\n"
"#            will command the VG to release the work item.\n"
"#        Setting the register value 276 (0x0114)\n"
"#            will command the VG to grip at 20 % vacuum.\n"
"#        Setting the register value 296 (0x0128)\n"
"#            will command the VG to grip at 40 % vacuum.\n"
"#        Setting the register value 331 (0x014B)\n"
"#            will command the VG to grip at 75 % vacuum.\n"
"#        Setting the register value 512 (0x0200)\n"
"#            will command the VG to idle the channel.\n"
"\n"
"uint16 rMCA\n"
"uint16 rVCA\n"
"\n"
"# rVCB : Same as the one of channel A.\n"
"\n"
"uint16 rMCB\n"
"uint16 rVCB\n"
;
  }

  static const char* value(const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rMCA);
      stream.next(m.rVCA);
      stream.next(m.rMCB);
      stream.next(m.rVCB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnRobotVGOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onrobot_vg_control::OnRobotVGOutput_<ContainerAllocator>& v)
  {
    s << indent << "rMCA: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rMCA);
    s << indent << "rVCA: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rVCA);
    s << indent << "rMCB: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rMCB);
    s << indent << "rVCB: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rVCB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONROBOT_VG_CONTROL_MESSAGE_ONROBOTVGOUTPUT_H
