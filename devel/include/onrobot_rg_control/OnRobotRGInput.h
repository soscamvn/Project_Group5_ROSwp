// Generated by gencpp from file onrobot_rg_control/OnRobotRGInput.msg
// DO NOT EDIT!


#ifndef ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGINPUT_H
#define ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGINPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace onrobot_rg_control
{
template <class ContainerAllocator>
struct OnRobotRGInput_
{
  typedef OnRobotRGInput_<ContainerAllocator> Type;

  OnRobotRGInput_()
    : gFOF(0)
    , gGWD(0)
    , gSTA(0)
    , gWDF(0)  {
    }
  OnRobotRGInput_(const ContainerAllocator& _alloc)
    : gFOF(0)
    , gGWD(0)
    , gSTA(0)
    , gWDF(0)  {
  (void)_alloc;
    }



   typedef uint16_t _gFOF_type;
  _gFOF_type gFOF;

   typedef uint16_t _gGWD_type;
  _gGWD_type gGWD;

   typedef uint8_t _gSTA_type;
  _gSTA_type gSTA;

   typedef uint16_t _gWDF_type;
  _gWDF_type gWDF;





  typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> const> ConstPtr;

}; // struct OnRobotRGInput_

typedef ::onrobot_rg_control::OnRobotRGInput_<std::allocator<void> > OnRobotRGInput;

typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGInput > OnRobotRGInputPtr;
typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGInput const> OnRobotRGInputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator1> & lhs, const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator2> & rhs)
{
  return lhs.gFOF == rhs.gFOF &&
    lhs.gGWD == rhs.gGWD &&
    lhs.gSTA == rhs.gSTA &&
    lhs.gWDF == rhs.gWDF;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator1> & lhs, const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onrobot_rg_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94435113a24b6809371af29f68843bdb";
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94435113a24b6809ULL;
  static const uint64_t static_value2 = 0x371af29f68843bdbULL;
};

template<class ContainerAllocator>
struct DataType< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onrobot_rg_control/OnRobotRGInput";
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# gFOF : Current fingertip offset in 1/10 millimeters. The value is a signed two's complement number.\n"
"\n"
"uint16 gFOF\n"
"\n"
"# gGWD : Current width between the gripper fingers in 1/10 millimeters.\n"
"#        The width is provided without any fingertip offset, as it is measured between the insides of the aluminum fingers.\n"
"\n"
"uint16 gGWD\n"
"\n"
"# gSTA : Current device status, which indicates the status of the gripper and its motion.\n"
"# Bit       - Name              - Description\n"
"# 0 (LSB)   - Busy              - High (1) when a motion is ongoing, low (0) when not. The gripper will only accept new commands when this flag is low.\n"
"# 1         - Grip detected     - High (1) when an internal- or external grip is detected.\n"
"# 2         - S1 pushed         - High (1) when safety switch 1 is pushed.\n"
"# 3         - S1 trigged        - High (1) when safety circuit 1 is activated. The gripper will not move while this flag is high.\n"
"# 4         - S2 pushed         - High (1) when safety switch 2 is pushed.\n"
"# 5         - S2 trigged        - High (1) when safety circuit 2 is activated. The gripper will not move while this flag is high.\n"
"# 6         - Safety error      - High (1) when on power on any of the safety switch is pushed.\n"
"# 7 - 15    - Reserved          - Not used.\n"
"\n"
"uint8 gSTA\n"
"\n"
"# gWDF : Current width between the gripper fingers in 1/10 millimeters.\n"
"#        The set fingertip offset is considered.\n"
"\n"
"uint16 gWDF\n"
;
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gFOF);
      stream.next(m.gGWD);
      stream.next(m.gSTA);
      stream.next(m.gWDF);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnRobotRGInput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onrobot_rg_control::OnRobotRGInput_<ContainerAllocator>& v)
  {
    s << indent << "gFOF: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gFOF);
    s << indent << "gGWD: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gGWD);
    s << indent << "gSTA: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gSTA);
    s << indent << "gWDF: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gWDF);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGINPUT_H
