// Generated by gencpp from file onrobot_rg_control/OnRobotRGOutput.msg
// DO NOT EDIT!


#ifndef ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGOUTPUT_H
#define ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGOUTPUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace onrobot_rg_control
{
template <class ContainerAllocator>
struct OnRobotRGOutput_
{
  typedef OnRobotRGOutput_<ContainerAllocator> Type;

  OnRobotRGOutput_()
    : rGFR(0)
    , rGWD(0)
    , rCTR(0)  {
    }
  OnRobotRGOutput_(const ContainerAllocator& _alloc)
    : rGFR(0)
    , rGWD(0)
    , rCTR(0)  {
  (void)_alloc;
    }



   typedef uint16_t _rGFR_type;
  _rGFR_type rGFR;

   typedef uint16_t _rGWD_type;
  _rGWD_type rGWD;

   typedef uint8_t _rCTR_type;
  _rCTR_type rCTR;





  typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> const> ConstPtr;

}; // struct OnRobotRGOutput_

typedef ::onrobot_rg_control::OnRobotRGOutput_<std::allocator<void> > OnRobotRGOutput;

typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGOutput > OnRobotRGOutputPtr;
typedef boost::shared_ptr< ::onrobot_rg_control::OnRobotRGOutput const> OnRobotRGOutputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator1> & lhs, const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator2> & rhs)
{
  return lhs.rGFR == rhs.rGFR &&
    lhs.rGWD == rhs.rGWD &&
    lhs.rCTR == rhs.rCTR;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator1> & lhs, const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace onrobot_rg_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d99680fed3cb1854614e74f47d8e8f52";
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd99680fed3cb1854ULL;
  static const uint64_t static_value2 = 0x614e74f47d8e8f52ULL;
};

template<class ContainerAllocator>
struct DataType< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "onrobot_rg_control/OnRobotRGOutput";
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# rGFR : The target force to be reached when gripping and holding a workpiece.\n"
"#        It must be provided in 1/10th Newtons.\n"
"#        The valid range is 0 to 400 for the RG2 and 0 to 1200 for the RG6.\n"
"\n"
"uint16 rGFR\n"
"\n"
"# rGWD : The target width between the finger to be moved to and maintained.\n"
"#        It must be provided in 1/10th millimeters.\n"
"#        The valid range is 0 to 1100 for the RG2 and 0 to 1600 for the RG6.\n"
"#        Please note that the target width should be provided corrected for any fingertip offset,\n"
"#        as it is measured between the insides of the aluminum fingers.\n"
"\n"
"uint16 rGWD\n"
"\n"
"# rCTR : The control field is used to start and stop gripper motion.\n"
"#        Only one option should be set at a time.\n"
"#        Please note that the gripper will not start a new motion\n"
"#        before the one currently being executed is done (see busy flag in the Status field).\n"
"# 0x0001 - grip\n"
"#          Start the motion, with the preset target force and width.\n"
"#          Width is calculated without the fingertip offset.\n"
"#          Please note that the gripper will ignore this command\n"
"#          if the busy flag is set in the status field.\n"
"# 0x0008 - stop\n"
"#          Stop the current motion.\n"
"# 0x0010 - grip_w_offset\n"
"#          Same as grip, but width is calculated with the set fingertip offset.\n"
"\n"
"uint8 rCTR\n"
;
  }

  static const char* value(const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rGFR);
      stream.next(m.rGWD);
      stream.next(m.rCTR);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnRobotRGOutput_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::onrobot_rg_control::OnRobotRGOutput_<ContainerAllocator>& v)
  {
    s << indent << "rGFR: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rGFR);
    s << indent << "rGWD: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rGWD);
    s << indent << "rCTR: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rCTR);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ONROBOT_RG_CONTROL_MESSAGE_ONROBOTRGOUTPUT_H
