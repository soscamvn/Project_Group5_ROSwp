# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from onrobot_vg_control/OnRobotVGOutput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OnRobotVGOutput(genpy.Message):
  _md5sum = "4d69df47809c592e1c34e330d53678dd"
  _type = "onrobot_vg_control/OnRobotVGOutput"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# rMCA : The Control mode
# rVCA : The Target vacuume field
#
#        The register allows for control of channel A.
#        The register is split into two 8-bit fields:
#        Bits 15-8        Bits 7-0
#        Control mode     Target vacuum
#
#        The Control mode field must contain one of these three values:
#
#        Value    Name    Description
#        0 (0x00) Release Commands the channel to release
#                         any work item and stop the pump,
#                         if not required by the other channel.
#        1 (0x01) Grip    Commands the channel to build up
#                         and maintain vacuum on this channel.
#        2 (0x02) Idle    Commands the channel to neither release nor grip.
#                         Workpieces may "stick" to the channel
#                         if physically pressed towards its vacuum cups,
#                         but the VG will use slightly less power.
#
#        The Target vacuum field sets the level of vacuum
#        to be build up and maintained by the chann el.
#        It is used only when the control mode is 1 (0x01) / Grip.
#        The target vacuum should be provided in % vacuum.
#        It should never exceed 80.
#
#        Examples:
#        Setting the register value 0 (0x0000)
#            will command the VG to release the work item.
#        Setting the register value 276 (0x0114)
#            will command the VG to grip at 20 % vacuum.
#        Setting the register value 296 (0x0128)
#            will command the VG to grip at 40 % vacuum.
#        Setting the register value 331 (0x014B)
#            will command the VG to grip at 75 % vacuum.
#        Setting the register value 512 (0x0200)
#            will command the VG to idle the channel.

uint16 rMCA
uint16 rVCA

# rVCB : Same as the one of channel A.

uint16 rMCB
uint16 rVCB
"""
  __slots__ = ['rMCA','rVCA','rMCB','rVCB']
  _slot_types = ['uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rMCA,rVCA,rMCB,rVCB

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OnRobotVGOutput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rMCA is None:
        self.rMCA = 0
      if self.rVCA is None:
        self.rVCA = 0
      if self.rMCB is None:
        self.rMCB = 0
      if self.rVCB is None:
        self.rVCB = 0
    else:
      self.rMCA = 0
      self.rVCA = 0
      self.rMCB = 0
      self.rVCB = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4H().pack(_x.rMCA, _x.rVCA, _x.rMCB, _x.rVCB))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rMCA, _x.rVCA, _x.rMCB, _x.rVCB,) = _get_struct_4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4H().pack(_x.rMCA, _x.rVCA, _x.rMCB, _x.rVCB))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.rMCA, _x.rVCA, _x.rMCB, _x.rVCB,) = _get_struct_4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4H = None
def _get_struct_4H():
    global _struct_4H
    if _struct_4H is None:
        _struct_4H = struct.Struct("<4H")
    return _struct_4H
