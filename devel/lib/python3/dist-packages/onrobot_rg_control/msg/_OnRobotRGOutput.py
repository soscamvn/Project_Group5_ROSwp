# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from onrobot_rg_control/OnRobotRGOutput.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OnRobotRGOutput(genpy.Message):
  _md5sum = "d99680fed3cb1854614e74f47d8e8f52"
  _type = "onrobot_rg_control/OnRobotRGOutput"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# rGFR : The target force to be reached when gripping and holding a workpiece.
#        It must be provided in 1/10th Newtons.
#        The valid range is 0 to 400 for the RG2 and 0 to 1200 for the RG6.

uint16 rGFR

# rGWD : The target width between the finger to be moved to and maintained.
#        It must be provided in 1/10th millimeters.
#        The valid range is 0 to 1100 for the RG2 and 0 to 1600 for the RG6.
#        Please note that the target width should be provided corrected for any fingertip offset,
#        as it is measured between the insides of the aluminum fingers.

uint16 rGWD

# rCTR : The control field is used to start and stop gripper motion.
#        Only one option should be set at a time.
#        Please note that the gripper will not start a new motion
#        before the one currently being executed is done (see busy flag in the Status field).
# 0x0001 - grip
#          Start the motion, with the preset target force and width.
#          Width is calculated without the fingertip offset.
#          Please note that the gripper will ignore this command
#          if the busy flag is set in the status field.
# 0x0008 - stop
#          Stop the current motion.
# 0x0010 - grip_w_offset
#          Same as grip, but width is calculated with the set fingertip offset.

uint8 rCTR"""
  __slots__ = ['rGFR','rGWD','rCTR']
  _slot_types = ['uint16','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rGFR,rGWD,rCTR

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OnRobotRGOutput, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rGFR is None:
        self.rGFR = 0
      if self.rGWD is None:
        self.rGWD = 0
      if self.rCTR is None:
        self.rCTR = 0
    else:
      self.rGFR = 0
      self.rGWD = 0
      self.rCTR = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2HB().pack(_x.rGFR, _x.rGWD, _x.rCTR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.rGFR, _x.rGWD, _x.rCTR,) = _get_struct_2HB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2HB().pack(_x.rGFR, _x.rGWD, _x.rCTR))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.rGFR, _x.rGWD, _x.rCTR,) = _get_struct_2HB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2HB = None
def _get_struct_2HB():
    global _struct_2HB
    if _struct_2HB is None:
        _struct_2HB = struct.Struct("<2HB")
    return _struct_2HB
